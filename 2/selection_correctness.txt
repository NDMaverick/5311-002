Selection Sort Correctness

Loop invariant: At the start of each iteration of the outer for loop, the subarray A[1,..,i-1] contains the i-1 smallest elements of A, in sorted order.

Initialization: Prior to the first iteration of the loop, i = 1. The subarray A[1,..,i-1] = A[1,0] is empty, and so it trivially contains the i-1 smallest elements of A, in sorted order.

Maintenance: To see that each iteration maintains the loop invariant, we must show that A[1,..,i] contains the i smallest elements of A, in sorted order.
We know that A[1,..,i-1] contains the i-1 smallest elements of A, in sorted order. In the loop the algorithm searches for the smallest element in A[i,...,n].
Then the smallest element is swapped with A[i]. Because A[1,..,i-1] contains the i-1 smallest elements of A, A[i] is the biggest element in A[1,...,i].
And since A[1,...,i-1] is sorted and A[i] is the last and biggest element in A[1,...,i], A[1,...,i] is sorted.

Termination: At termination, i = n+1. Using the loop invariant, the subarray A[1,..,n] contains the n smallest elements of A, in sorted order. Thus, the algorithm is correct.